const multer = require('multer');
const sharp = require('sharp');

const User = require('../models/user.model');
const catchAsync = require('../utils/catchAsync');
const AppError = require('../utils/appError');
const handlerFactory = require('./handlerFactory');

const filterObject = (object, ...allowedFields) =>
  Object.entries(object)
    .filter(([key]) => allowedFields.includes(key))
    .reduce((acc, [key, value]) => {
      acc[key] = value;
      return acc;
    }, {});

// // No image processing
// const multerStorage = multer.diskStorage({
//   destination: (req, file, callback) => {
//     callback(null, 'public/img/users');
//   },
//   filename: (req, file, callback) => {
//     //Filename user-ID-TimeStamp-Extension Unique file name
//     const fileExtension = file.mimetype.split('/')[1];
//     callback(null, `user-${req.user.id}-${Date.now()}.${fileExtension}`);
//   },
// });

const multerStorage = multer.memoryStorage();

//Predicate to test if it's really an image
const multerFiler = (req, file, callback) => {
  if (!file.mimetype.startsWith('image'))
    return callback(
      new AppError('Not an image! Please upload only images.', 400),
      false
    );

  callback(null, true);
};

//No storage image will be saved in memory, but not persisted
const upload = multer({
  storage: multerStorage,
  fileFilter: multerFiler,
});

exports.uploadUserPhoto = upload.single('photo');

exports.resizeUserPhoto = catchAsync(async (req, res, next) => {
  if (!req.file) return next();

  //Filename user-ID-TimeStamp-Extension Unique file name
  //updateMeHandler is dependant of this
  req.file.filename = `user-${req.user.id}-${Date.now()}.jpeg`;

  await sharp(req.file.buffer)
    .resize(500, 500, {})
    .toFormat('jpeg', {})
    .jpeg({ quality: 90 })
    .toFile(`public/img/users/${req.file.filename}`);

  next();
});

exports.getMeMiddleware = catchAsync(async (req, res, next) => {
  req.params.id = req.user.id;
  next();
});

exports.updateMeHandler = catchAsync(async (req, res, next) => {
  const {
    body,
    user: { id },
  } = req;

  // 1) Create error if user POSTs password data
  if (body.password || body.confirmPassword)
    return next(
      new AppError(
        'This route is not for password updates, please use updateMyPassword',
        400
      )
    );

  // 2) Update user document
  const filteredBody = filterObject(body, 'name', 'email');

  //req.file is generated by multer middleware
  //This is the fix to update photo property of document with Mutler save file name
  if (req.file) filteredBody.photo = req.file.filename;

  const updatedUser = await User.findByIdAndUpdate(id, filteredBody, {
    new: true,
    runValidators: true,
  });

  res.status(200).json({
    status: 'success',
    data: { user: updatedUser },
  });
});

exports.deleteMeHandler = catchAsync(async (req, res, _next) => {
  const { user: id } = req;

  await User.findByIdAndUpdate(id, { active: false });

  res.status(204).json({
    status: 'success',
    data: null,
  });
});

exports.createUserHandler = (req, res) => {
  res.status(500).json({
    status: 'error',
    message: 'This route is not yet defined, please use /signup instead',
  });
};

exports.getUserHandler = handlerFactory.getOne(User);
exports.getAllUsersHandler = handlerFactory.getAll(User);
exports.updateUserHandler = handlerFactory.updateOne(User);
exports.deleteUserHandler = handlerFactory.deleteOne(User);
